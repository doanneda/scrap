{"ast":null,"code":"// import { Link } from 'react-router-dom';\n// import React, { useState } from 'react';\n\n// export default function CreatePage() {\n//   const [numImages, setNumImages] = useState(1); // Number of image slots (1 to 4)\n//   const [images, setImages] = useState([]); // Store the uploaded images\n//   const [description, setDescription] = useState(''); // Store the description\n//   const [error, setError] = useState(''); // Error message for validation feedback\n\n//   const handleNumImagesChange = (event) => {\n//     const newNumImages = parseInt(event.target.value, 10);\n//     setNumImages(newNumImages);\n//     setImages(Array(newNumImages).fill(null)); // Reset images array to match the new count\n//     setError(''); // Clear error when images changed\n//   };\n\n//   const handleFileChange = (index, event) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = event.target.files[0];\n//     setImages(updatedImages);\n//     setError(''); \n//   };\n\n//   // Removing images\n//   const handleRemove = (index) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = null;\n//     setImages(updatedImages);\n//   };\n\n//   const handleUpload = () => {\n//     // Check if all required images are uploaded\n//     if (images.filter((image) => image !== null).length !== numImages) {\n//       setError(`Please upload all ${numImages} images before proceeding.`);\n//       return;\n//     }\n\n//     // If all images are uploaded, proceed with upload logic\n//     console.log('Selected Images:', images);\n//     console.log('Description:', description);\n\n//     // Reset state\n//     setError('');\n//     setImages(Array(numImages).fill(null));\n//     setDescription('');\n//     alert('Upload successful!');\n//   };\n\n//   return (\n//     <div>\n//       {/* Dropdown for Number of Images */}\n//       <div>\n//         <label>\n//           Select number of images:\n//           <select\n//             value={numImages}\n//             onChange={handleNumImagesChange}\n//           >\n//             {[1, 2, 3, 4].map((num) => (\n//               <option key={num} value={num}>\n//                 {num}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//       </div>\n\n//       {/* Dynamic Grid */}\n//       <div\n//         style={{\n//           display: 'grid',\n//           gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n//           gap: '10px',\n//         }}\n//       >\n//         {Array.from({ length: numImages }).map((_, index) => (\n//           <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n//             {images[index] ? (\n//               <>\n//                 <img\n//                   src={URL.createObjectURL(images[index])}\n//                   alt=\"Preview\"\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     objectFit: 'cover',\n//                   }}\n//                 />\n//                 <button\n//                   onClick={() => handleRemove(index)}\n//                   style={{\n//                     position: 'absolute',\n//                     top: 0,\n//                     right: 0,\n//                     backgroundColor: 'red',\n//                     color: 'white',\n//                     border: 'none',\n//                     borderRadius: '50%',\n//                     width: '20px',\n//                     height: '20px',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   &times;\n//                 </button>\n//               </>\n//             ) : (\n//               <label>\n//                 <div\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     border: '1px dashed gray',\n//                     display: 'flex',\n//                     alignItems: 'center',\n//                     justifyContent: 'center',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   +\n//                 </div>\n//                 <input\n//                   type=\"file\"\n//                   style={{ display: 'none' }}\n//                   onChange={(e) => handleFileChange(index, e)}\n//                 />\n//               </label>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Text Input Section */}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           placeholder=\"Enter a description here...\"\n//           style={{\n//             width: '100%',\n//             height: '80px',\n//             padding: '10px',\n//             fontSize: '14px',\n//             border: '1px solid gray',\n//             borderRadius: '5px',\n//           }}\n//         ></textarea>\n//       </div>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div\n//           style={{\n//             marginTop: '10px',\n//             color: 'red',\n//             fontSize: '14px',\n//           }}\n//         >\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Upload Button */}\n//       <button\n//         onClick={handleUpload}\n//         style={{\n//           marginTop: '20px',\n//           padding: '10px 20px',\n//           backgroundColor: 'blue',\n//           color: 'white',\n//           border: 'none',\n//           borderRadius: '5px',\n//           cursor: 'pointer',\n//         }}\n//       >\n//         Upload\n//       </button>\n//     </div>\n\n//     // <Link to=\"login\">\n//     //     <button>Login</button>\n//     // </Link>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/CreatePage.js"],"sourcesContent":["// import { Link } from 'react-router-dom';\n// import React, { useState } from 'react';\n\n// export default function CreatePage() {\n//   const [numImages, setNumImages] = useState(1); // Number of image slots (1 to 4)\n//   const [images, setImages] = useState([]); // Store the uploaded images\n//   const [description, setDescription] = useState(''); // Store the description\n//   const [error, setError] = useState(''); // Error message for validation feedback\n\n//   const handleNumImagesChange = (event) => {\n//     const newNumImages = parseInt(event.target.value, 10);\n//     setNumImages(newNumImages);\n//     setImages(Array(newNumImages).fill(null)); // Reset images array to match the new count\n//     setError(''); // Clear error when images changed\n//   };\n\n//   const handleFileChange = (index, event) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = event.target.files[0];\n//     setImages(updatedImages);\n//     setError(''); \n//   };\n\n//   // Removing images\n//   const handleRemove = (index) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = null;\n//     setImages(updatedImages);\n//   };\n\n//   const handleUpload = () => {\n//     // Check if all required images are uploaded\n//     if (images.filter((image) => image !== null).length !== numImages) {\n//       setError(`Please upload all ${numImages} images before proceeding.`);\n//       return;\n//     }\n\n//     // If all images are uploaded, proceed with upload logic\n//     console.log('Selected Images:', images);\n//     console.log('Description:', description);\n\n//     // Reset state\n//     setError('');\n//     setImages(Array(numImages).fill(null));\n//     setDescription('');\n//     alert('Upload successful!');\n//   };\n\n//   return (\n//     <div>\n//       {/* Dropdown for Number of Images */}\n//       <div>\n//         <label>\n//           Select number of images:\n//           <select\n//             value={numImages}\n//             onChange={handleNumImagesChange}\n//           >\n//             {[1, 2, 3, 4].map((num) => (\n//               <option key={num} value={num}>\n//                 {num}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//       </div>\n\n//       {/* Dynamic Grid */}\n//       <div\n//         style={{\n//           display: 'grid',\n//           gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n//           gap: '10px',\n//         }}\n//       >\n//         {Array.from({ length: numImages }).map((_, index) => (\n//           <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n//             {images[index] ? (\n//               <>\n//                 <img\n//                   src={URL.createObjectURL(images[index])}\n//                   alt=\"Preview\"\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     objectFit: 'cover',\n//                   }}\n//                 />\n//                 <button\n//                   onClick={() => handleRemove(index)}\n//                   style={{\n//                     position: 'absolute',\n//                     top: 0,\n//                     right: 0,\n//                     backgroundColor: 'red',\n//                     color: 'white',\n//                     border: 'none',\n//                     borderRadius: '50%',\n//                     width: '20px',\n//                     height: '20px',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   &times;\n//                 </button>\n//               </>\n//             ) : (\n//               <label>\n//                 <div\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     border: '1px dashed gray',\n//                     display: 'flex',\n//                     alignItems: 'center',\n//                     justifyContent: 'center',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   +\n//                 </div>\n//                 <input\n//                   type=\"file\"\n//                   style={{ display: 'none' }}\n//                   onChange={(e) => handleFileChange(index, e)}\n//                 />\n//               </label>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Text Input Section */}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           placeholder=\"Enter a description here...\"\n//           style={{\n//             width: '100%',\n//             height: '80px',\n//             padding: '10px',\n//             fontSize: '14px',\n//             border: '1px solid gray',\n//             borderRadius: '5px',\n//           }}\n//         ></textarea>\n//       </div>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div\n//           style={{\n//             marginTop: '10px',\n//             color: 'red',\n//             fontSize: '14px',\n//           }}\n//         >\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Upload Button */}\n//       <button\n//         onClick={handleUpload}\n//         style={{\n//           marginTop: '20px',\n//           padding: '10px 20px',\n//           backgroundColor: 'blue',\n//           color: 'white',\n//           border: 'none',\n//           borderRadius: '5px',\n//           cursor: 'pointer',\n//         }}\n//       >\n//         Upload\n//       </button>\n//     </div>\n    \n\n//     // <Link to=\"login\">\n//     //     <button>Login</button>\n//     // </Link>\n//   );\n// }\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
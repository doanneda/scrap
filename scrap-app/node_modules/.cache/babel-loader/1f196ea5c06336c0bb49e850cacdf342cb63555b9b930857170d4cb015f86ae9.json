{"ast":null,"code":"var _jsxFileName = \"/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/CreatePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreatePage() {\n  _s();\n  const [numImages, setNumImages] = useState(1);\n  const [images, setImages] = useState([]);\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n  const name = \"TEST3\";\n  const color = \"paleGreen\";\n  const stickers = [{\n    \"stickerType\": \"emoji\",\n    \"position\": [{\n      \"x\": 10,\n      \"y\": 20\n    }, {\n      \"x\": 30,\n      \"y\": 40\n    }]\n  }];\n  const MAX_FILE_SIZE = 10 * 1024 * 1024; // 5MB\n  const MAX_WIDTH = 800;\n  const MAX_HEIGHT = 800;\n  const handleNumImagesChange = event => {\n    const newNumImages = parseInt(event.target.value, 10);\n    setNumImages(newNumImages);\n    setImages(Array(newNumImages).fill(null));\n    setError('');\n  };\n  const handleFileChange = (index, event) => {\n    const file = event.target.files[0];\n    if (file && file.size > MAX_FILE_SIZE) {\n      alert('File is too large. Please upload a file smaller than 5MB.');\n      return;\n    }\n    const updatedImages = [...images];\n    updatedImages[index] = file;\n    setImages(updatedImages);\n    setError('');\n  };\n\n  //   const handleRemove = (index) => {\n  //     const updatedImages = [...images];\n  //     updatedImages[index] = null;\n  //     setImages(updatedImages);\n  //   };\n\n  const resizeImage = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const img = new Image();\n        img.src = reader.result;\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          let width = img.width;\n          let height = img.height;\n          if (width > height) {\n            if (width > MAX_WIDTH) {\n              height *= MAX_WIDTH / width;\n              width = MAX_WIDTH;\n            }\n          } else {\n            if (height > MAX_HEIGHT) {\n              width *= MAX_HEIGHT / height;\n              height = MAX_HEIGHT;\n            }\n          }\n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0, width, height);\n          resolve(canvas.toDataURL('image/jpeg')); // Base64 encoded image\n        };\n        img.onerror = reject;\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file); // Reads the file as base64\n    });\n  };\n  const handleUpload = async () => {\n    // Check if all required images are uploaded\n    if (images.filter(image => image !== null).length !== numImages) {\n      setError(`Please upload all ${numImages} images before proceeding.`);\n      return;\n    }\n\n    // Resize images and convert to Base64\n    const imagePromises = images.map(file => resizeImage(file));\n    try {\n      const resizedBase64Images = await Promise.all(imagePromises);\n\n      // Send to server\n      const scrapData = {\n        name,\n        binaryImages: resizedBase64Images,\n        description,\n        color,\n        stickers\n      };\n      const res = await axios.post('http://localhost:4000/scrap-pages/post', scrapData);\n      console.log('Upload Successful', res.data);\n\n      // Reset state after successful upload\n      setError('');\n      setImages(Array(numImages).fill(null));\n      setDescription('');\n      alert('Upload successful!');\n    } catch (err) {\n      console.error('Upload error:', err.message);\n      setError('There was an error uploading the images.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select number of images:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: numImages,\n          onChange: handleNumImagesChange,\n          children: [1, 2, 3, 4].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: num,\n            children: num\n          }, num, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n        gap: '10px'\n      },\n      children: Array.from({\n        length: numImages\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          textAlign: 'center'\n        },\n        children: images[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: URL.createObjectURL(images[index]),\n            alt: \"Preview\",\n            style: {\n              width: '100px',\n              height: '100px',\n              objectFit: 'cover'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemove(index),\n            style: {\n              position: 'absolute',\n              top: 0,\n              right: 0,\n              backgroundColor: 'red',\n              color: 'white',\n              border: 'none',\n              borderRadius: '50%',\n              width: '20px',\n              height: '20px',\n              cursor: 'pointer'\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100px',\n              height: '100px',\n              border: '1px dashed gray',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer'\n            },\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            style: {\n              display: 'none'\n            },\n            onChange: e => handleFileChange(index, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        placeholder: \"Enter a description here...\",\n        style: {\n          width: '100%',\n          height: '80px',\n          padding: '10px',\n          fontSize: '14px',\n          border: '1px solid gray',\n          borderRadius: '5px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        color: 'red',\n        fontSize: '14px'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      style: {\n        marginTop: '20px',\n        padding: '10px 20px',\n        backgroundColor: 'blue',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// export default function CreatePage() {\n//   const [numImages, setNumImages] = useState(1);\n//   const [images, setImages] = useState([]);\n//   const [description, setDescription] = useState('');\n//   const [error, setError] = useState('');\n//   const name = \"TEST3\";\n//   const color = \"paleGreen\";\n//   const stickers = [\n//     {\n//       \"stickerType\": \"emoji\",\n//       \"position\": [\n//         { \"x\": 10, \"y\": 20 },\n//         { \"x\": 30, \"y\": 40 },\n//       ],\n//     },\n//   ];\n\n//   const handleNumImagesChange = (event) => {\n//     const newNumImages = parseInt(event.target.value, 10);\n//     setNumImages(newNumImages);\n//     setImages(Array(newNumImages).fill(null));\n//     setError('');\n//   };\n\n//   const handleFileChange = (index, event) => {\n//     const file = event.target.files[0];\n//     if (!file) return; // Prevent errors if no file is selected\n//     const updatedImages = [...images];\n//     updatedImages[index] = file;\n//     setImages(updatedImages);\n//     setError('');\n//   };\n\n//   const handleRemove = (index) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = null;\n//     setImages(updatedImages);\n//   };\n\n//   const handleUpload = async () => {\n//     // Check if all required images are uploaded\n//     if (images.filter((image) => image !== null).length !== numImages) {\n//       setError(`Please upload all ${numImages} images before proceeding.`);\n//       return;\n//     }\n\n//     console.log('Selected Images:', images);\n//     console.log('Description:', description);\n\n//     // Convert images to Base64\n//     const imagePromises = images.map((file) => {\n//       return new Promise((resolve, reject) => {\n//         const reader = new FileReader();\n//         reader.onloadend = () => {\n//           const base64Image = reader.result; // Base64-encoded string\n//           resolve(base64Image); // Resolve the promise with the Base64 string\n//         };\n//         reader.onerror = reject;\n//         reader.readAsDataURL(file); // Reads the file as Base64 data URL\n//       });\n//     });\n\n//     try {\n//       const base64Images = await Promise.all(imagePromises);\n//       console.log(\"Base64 Encoded Images:\", base64Images);\n\n//       const scrapData = {\n//         name,\n//         binaryImages: base64Images, // Send Base64 strings to the backend\n//         description,\n//         color,\n//         stickers,\n//       };\n\n//       console.log(\"Sending scrapData to axios...\");\n//       const res = await axios.post(\"http://localhost:4000/scrap-pages/post\", scrapData);\n\n//       console.log(\"Axios request successful\");\n//       if (res.data.error) {\n//         console.error(res.data.error);\n//       } else {\n//         // const userId = res.data._id;\n//         console.log(\"Storing user ID...\");\n//         // await Storage({ key: 'userId', value: userId, saveKey: true });\n//         console.log(\"Successfully stored user ID!\");\n//       }\n//     } catch (err) {\n//       console.error(\"Error during image upload:\", err.message);\n//     }\n\n//     // Reset state\n//     setError('');\n//     setImages(Array(numImages).fill(null));\n//     setDescription('');\n//     alert('Upload successful!');\n//   };\n\n//   return (\n//     <div>\n//       <label>\n//         Select number of images:\n//         <select value={numImages} onChange={handleNumImagesChange}>\n//           {[1, 2, 3, 4].map((num) => (\n//             <option key={num} value={num}>\n//               {num}\n//             </option>\n//           ))}\n//         </select>\n//       </label>\n//       <div\n//         style={{\n//           display: 'grid',\n//           gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n//           gap: '10px',\n//         }}\n//       >\n//         {Array.from({ length: numImages }).map((_, index) => (\n//           <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n//             {images[index] ? (\n//               <>\n//                 <img\n//                   src={URL.createObjectURL(images[index])}\n//                   alt=\"Preview\"\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     objectFit: 'cover',\n//                   }}\n//                 />\n//                 <button\n//                   onClick={() => handleRemove(index)}\n//                   style={{\n//                     position: 'absolute',\n//                     top: 0,\n//                     right: 0,\n//                     backgroundColor: 'red',\n//                     color: 'white',\n//                     border: 'none',\n//                     borderRadius: '50%',\n//                     width: '20px',\n//                     height: '20px',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   &times;\n//                 </button>\n//               </>\n//             ) : (\n//               <label>\n//                 <div\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     border: '1px dashed gray',\n//                     display: 'flex',\n//                     alignItems: 'center',\n//                     justifyContent: 'center',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   +\n//                 </div>\n//                 <input\n//                   type=\"file\"\n//                   style={{ display: 'none' }}\n//                   onChange={(e) => handleFileChange(index, e)}\n//                 />\n//               </label>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//       <textarea\n//         value={description}\n//         onChange={(e) => setDescription(e.target.value)}\n//         placeholder=\"Enter a description here...\"\n//         style={{\n//           width: '100%',\n//           height: '80px',\n//           marginTop: '20px',\n//         }}\n//       ></textarea>\n//       {error && <div style={{ color: 'red' }}>{error}</div>}\n//       <button onClick={handleUpload}>Upload</button>\n//     </div>\n//   );\n// }\n_s(CreatePage, \"Z7iK1PcT+GZS2NS72sllTr16Uss=\");\n_c = CreatePage;\nvar _c;\n$RefreshReg$(_c, \"CreatePage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","CreatePage","_s","numImages","setNumImages","images","setImages","description","setDescription","error","setError","name","color","stickers","MAX_FILE_SIZE","MAX_WIDTH","MAX_HEIGHT","handleNumImagesChange","event","newNumImages","parseInt","target","value","Array","fill","handleFileChange","index","file","files","size","alert","updatedImages","resizeImage","Promise","resolve","reject","reader","FileReader","onloadend","img","Image","src","result","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","toDataURL","onerror","readAsDataURL","handleUpload","filter","image","length","imagePromises","map","resizedBase64Images","all","scrapData","binaryImages","res","post","console","log","data","err","message","children","onChange","num","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","Math","min","gap","from","_","position","textAlign","URL","createObjectURL","alt","objectFit","onClick","handleRemove","top","right","backgroundColor","border","borderRadius","cursor","alignItems","justifyContent","type","e","marginTop","placeholder","padding","fontSize","_c","$RefreshReg$"],"sources":["/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/CreatePage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nexport default function CreatePage() {\n  const [numImages, setNumImages] = useState(1);\n  const [images, setImages] = useState([]);\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n  const name = \"TEST3\";\n  const color = \"paleGreen\";\n  const stickers = [\n    {\n      \"stickerType\": \"emoji\",\n      \"position\": [\n        { \"x\": 10, \"y\": 20 },\n        { \"x\": 30, \"y\": 40 }\n      ]\n    },\n  ];\n\n  const MAX_FILE_SIZE = 10 * 1024 * 1024; // 5MB\n  const MAX_WIDTH = 800;\n  const MAX_HEIGHT = 800;\n\n  const handleNumImagesChange = (event) => {\n    const newNumImages = parseInt(event.target.value, 10);\n    setNumImages(newNumImages);\n    setImages(Array(newNumImages).fill(null));\n    setError('');\n  };\n\n  const handleFileChange = (index, event) => {\n    const file = event.target.files[0];\n    if (file && file.size > MAX_FILE_SIZE) {\n      alert('File is too large. Please upload a file smaller than 5MB.');\n      return;\n    }\n\n    const updatedImages = [...images];\n    updatedImages[index] = file;\n    setImages(updatedImages);\n    setError('');\n  };\n\n  //   const handleRemove = (index) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = null;\n//     setImages(updatedImages);\n//   };\n\n  const resizeImage = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const img = new Image();\n        img.src = reader.result;\n\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          let width = img.width;\n          let height = img.height;\n\n          if (width > height) {\n            if (width > MAX_WIDTH) {\n              height *= MAX_WIDTH / width;\n              width = MAX_WIDTH;\n            }\n          } else {\n            if (height > MAX_HEIGHT) {\n              width *= MAX_HEIGHT / height;\n              height = MAX_HEIGHT;\n            }\n          }\n\n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0, width, height);\n\n          resolve(canvas.toDataURL('image/jpeg')); // Base64 encoded image\n        };\n\n        img.onerror = reject;\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file); // Reads the file as base64\n    });\n  };\n\n  const handleUpload = async () => {\n    // Check if all required images are uploaded\n    if (images.filter((image) => image !== null).length !== numImages) {\n      setError(`Please upload all ${numImages} images before proceeding.`);\n      return;\n    }\n\n    // Resize images and convert to Base64\n    const imagePromises = images.map((file) => resizeImage(file));\n\n    try {\n      const resizedBase64Images = await Promise.all(imagePromises);\n\n      // Send to server\n      const scrapData = {\n        name,\n        binaryImages: resizedBase64Images,\n        description,\n        color,\n        stickers\n      };\n\n      const res = await axios.post('http://localhost:4000/scrap-pages/post', scrapData);\n      console.log('Upload Successful', res.data);\n\n      // Reset state after successful upload\n      setError('');\n      setImages(Array(numImages).fill(null));\n      setDescription('');\n      alert('Upload successful!');\n    } catch (err) {\n      console.error('Upload error:', err.message);\n      setError('There was an error uploading the images.');\n    }\n  };\n\n  return (\n    <div>\n      {/* Dropdown for Number of Images */}\n      <div>\n        <label>\n          Select number of images:\n          <select value={numImages} onChange={handleNumImagesChange}>\n            {[1, 2, 3, 4].map((num) => (\n              <option key={num} value={num}>\n                {num}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n\n      {/* Dynamic Grid for Image Slots */}\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n          gap: '10px',\n        }}\n      >\n        {Array.from({ length: numImages }).map((_, index) => (\n          <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n            {images[index] ? (\n              <>\n                <img\n                  src={URL.createObjectURL(images[index])}\n                  alt=\"Preview\"\n                  style={{\n                    width: '100px',\n                    height: '100px',\n                    objectFit: 'cover',\n                  }}\n                />\n                <button\n                  onClick={() => handleRemove(index)}\n                  style={{\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'red',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '50%',\n                    width: '20px',\n                    height: '20px',\n                    cursor: 'pointer',\n                  }}\n                >\n                  &times;\n                </button>\n              </>\n            ) : (\n              <label>\n                <div\n                  style={{\n                    width: '100px',\n                    height: '100px',\n                    border: '1px dashed gray',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    cursor: 'pointer',\n                  }}\n                >\n                  +\n                </div>\n                <input\n                  type=\"file\"\n                  style={{ display: 'none' }}\n                  onChange={(e) => handleFileChange(index, e)}\n                />\n              </label>\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* Text Input Section */}\n      <div style={{ marginTop: '20px' }}>\n        <textarea\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          placeholder=\"Enter a description here...\"\n          style={{\n            width: '100%',\n            height: '80px',\n            padding: '10px',\n            fontSize: '14px',\n            border: '1px solid gray',\n            borderRadius: '5px',\n          }}\n        ></textarea>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div\n          style={{\n            marginTop: '10px',\n            color: 'red',\n            fontSize: '14px',\n          }}\n        >\n          {error}\n        </div>\n      )}\n\n      {/* Upload Button */}\n      <button\n        onClick={handleUpload}\n        style={{\n          marginTop: '20px',\n          padding: '10px 20px',\n          backgroundColor: 'blue',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n        }}\n      >\n        Upload\n      </button>\n    </div>\n  );\n}\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// export default function CreatePage() {\n//   const [numImages, setNumImages] = useState(1);\n//   const [images, setImages] = useState([]);\n//   const [description, setDescription] = useState('');\n//   const [error, setError] = useState('');\n//   const name = \"TEST3\";\n//   const color = \"paleGreen\";\n//   const stickers = [\n//     {\n//       \"stickerType\": \"emoji\",\n//       \"position\": [\n//         { \"x\": 10, \"y\": 20 },\n//         { \"x\": 30, \"y\": 40 },\n//       ],\n//     },\n//   ];\n\n//   const handleNumImagesChange = (event) => {\n//     const newNumImages = parseInt(event.target.value, 10);\n//     setNumImages(newNumImages);\n//     setImages(Array(newNumImages).fill(null));\n//     setError('');\n//   };\n\n//   const handleFileChange = (index, event) => {\n//     const file = event.target.files[0];\n//     if (!file) return; // Prevent errors if no file is selected\n//     const updatedImages = [...images];\n//     updatedImages[index] = file;\n//     setImages(updatedImages);\n//     setError('');\n//   };\n\n//   const handleRemove = (index) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = null;\n//     setImages(updatedImages);\n//   };\n\n//   const handleUpload = async () => {\n//     // Check if all required images are uploaded\n//     if (images.filter((image) => image !== null).length !== numImages) {\n//       setError(`Please upload all ${numImages} images before proceeding.`);\n//       return;\n//     }\n  \n//     console.log('Selected Images:', images);\n//     console.log('Description:', description);\n  \n//     // Convert images to Base64\n//     const imagePromises = images.map((file) => {\n//       return new Promise((resolve, reject) => {\n//         const reader = new FileReader();\n//         reader.onloadend = () => {\n//           const base64Image = reader.result; // Base64-encoded string\n//           resolve(base64Image); // Resolve the promise with the Base64 string\n//         };\n//         reader.onerror = reject;\n//         reader.readAsDataURL(file); // Reads the file as Base64 data URL\n//       });\n//     });\n  \n//     try {\n//       const base64Images = await Promise.all(imagePromises);\n//       console.log(\"Base64 Encoded Images:\", base64Images);\n  \n//       const scrapData = {\n//         name,\n//         binaryImages: base64Images, // Send Base64 strings to the backend\n//         description,\n//         color,\n//         stickers,\n//       };\n  \n//       console.log(\"Sending scrapData to axios...\");\n//       const res = await axios.post(\"http://localhost:4000/scrap-pages/post\", scrapData);\n  \n//       console.log(\"Axios request successful\");\n//       if (res.data.error) {\n//         console.error(res.data.error);\n//       } else {\n//         // const userId = res.data._id;\n//         console.log(\"Storing user ID...\");\n//         // await Storage({ key: 'userId', value: userId, saveKey: true });\n//         console.log(\"Successfully stored user ID!\");\n//       }\n//     } catch (err) {\n//       console.error(\"Error during image upload:\", err.message);\n//     }\n  \n//     // Reset state\n//     setError('');\n//     setImages(Array(numImages).fill(null));\n//     setDescription('');\n//     alert('Upload successful!');\n//   };\n\n//   return (\n//     <div>\n//       <label>\n//         Select number of images:\n//         <select value={numImages} onChange={handleNumImagesChange}>\n//           {[1, 2, 3, 4].map((num) => (\n//             <option key={num} value={num}>\n//               {num}\n//             </option>\n//           ))}\n//         </select>\n//       </label>\n//       <div\n//         style={{\n//           display: 'grid',\n//           gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n//           gap: '10px',\n//         }}\n//       >\n//         {Array.from({ length: numImages }).map((_, index) => (\n//           <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n//             {images[index] ? (\n//               <>\n//                 <img\n//                   src={URL.createObjectURL(images[index])}\n//                   alt=\"Preview\"\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     objectFit: 'cover',\n//                   }}\n//                 />\n//                 <button\n//                   onClick={() => handleRemove(index)}\n//                   style={{\n//                     position: 'absolute',\n//                     top: 0,\n//                     right: 0,\n//                     backgroundColor: 'red',\n//                     color: 'white',\n//                     border: 'none',\n//                     borderRadius: '50%',\n//                     width: '20px',\n//                     height: '20px',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   &times;\n//                 </button>\n//               </>\n//             ) : (\n//               <label>\n//                 <div\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     border: '1px dashed gray',\n//                     display: 'flex',\n//                     alignItems: 'center',\n//                     justifyContent: 'center',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   +\n//                 </div>\n//                 <input\n//                   type=\"file\"\n//                   style={{ display: 'none' }}\n//                   onChange={(e) => handleFileChange(index, e)}\n//                 />\n//               </label>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//       <textarea\n//         value={description}\n//         onChange={(e) => setDescription(e.target.value)}\n//         placeholder=\"Enter a description here...\"\n//         style={{\n//           width: '100%',\n//           height: '80px',\n//           marginTop: '20px',\n//         }}\n//       ></textarea>\n//       {error && <div style={{ color: 'red' }}>{error}</div>}\n//       <button onClick={handleUpload}>Upload</button>\n//     </div>\n//   );\n// }"],"mappings":"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MAAM;UACdyD,OAAO,EAAE,MAAM;UACfC,QAAQ,EAAE,MAAM;UAChBV,MAAM,EAAE,gBAAgB;UACxBC,YAAY,EAAE;QAChB;MAAE;QAAAxB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,EAGLrE,KAAK,iBACJX,OAAA;MACEiF,KAAK,EAAE;QACL0B,SAAS,EAAE,MAAM;QACjB7F,KAAK,EAAE,KAAK;QACZgG,QAAQ,EAAE;MACZ,CAAE;MAAApC,QAAA,EAED/D;IAAK;MAAAkE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAGDhF,OAAA;MACE+F,OAAO,EAAEtC,YAAa;MACtBwB,KAAK,EAAE;QACL0B,SAAS,EAAE,MAAM;QACjBE,OAAO,EAAE,WAAW;QACpBV,eAAe,EAAE,MAAM;QACvBrF,KAAK,EAAE,OAAO;QACdsF,MAAM,EAAE,MAAM;QACdC,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAE;MACV,CAAE;MAAA5B,QAAA,EACH;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA5E,EAAA,CA3bwBD,UAAU;AAAA4G,EAAA,GAAV5G,UAAU;AAAA,IAAA4G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
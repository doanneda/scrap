{"ast":null,"code":"var _jsxFileName = \"/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/Feed.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// export default function Feed() {\n//     const [scrapData, setScrapData] = useState([]);\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         const fetchScrapData = async () => {\n//           try {\n//             const res = await axios.get('http://localhost:4000/scrap-pages'); // Update the endpoint if necessary\n//             setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n//           } catch (err) {\n//             console.error('Error fetching scrapbook data:', err);\n//             setError('Failed to load scrapbook data.');\n//           }\n//         };\n\n//         fetchScrapData();\n//       }, []);\n\n//       return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Scrapbook Pages</h1>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div style={{ color: 'red', marginBottom: '10px' }}>\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Render Scrapbook Pages */}\n//       <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', gap: '20px' }}>\n//         {scrapData.map((page, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               border: '1px solid #ccc',\n//               borderRadius: '10px',\n//               padding: '10px',\n//               backgroundColor: page.color || '#f9f9f9',\n//             }}\n//           >\n//             <h3>{page.name}</h3>\n//             <p>{page.description}</p>\n\n//             {/* Render Images */}\n//             {page.binaryImages && page.binaryImages.length > 0 ? (\n//               <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))', gap: '10px' }}>\n//                 {page.binaryImages.map((image, index) => {\n//                     const bufferToBase64 = (bufferObj) => {\n//                         const byteArray = new Uint8Array(bufferObj.data); // Convert to Uint8Array\n//                         const base64String = new TextDecoder().decode(byteArray); // Decode to Base64 string\n//                         return base64String; // The result should include 'data:image/...'\n//                       };\n\n//                     const imageSrc = bufferToBase64(image);\n\n//                     return (\n//                         <img\n//                         key={index}\n//                         src={imageSrc}\n//                         alt={`Scrapbook ${index}`}\n//                         style={{ width: '150px', height: '150px', objectFit: 'cover' }}\n//                         />\n//                     );\n//                 })}\n//               </div>\n//             ) : (\n//               <p>No images available</p>\n//             )}\n\n//             {/* Stickers Section */}\n//             {page.stickers && page.stickers.length > 0 && (\n//               <div>\n//                 <h4>Stickers:</h4>\n//                 <ul>\n//                   {page.stickers.map((sticker, stickerIndex) => (\n//                     <li key={stickerIndex}>\n//                       Type: {sticker.stickerType}, Positions:{' '}\n//                       {sticker.position.map((pos, posIndex) => (\n//                         <span key={posIndex}>\n//                           ({pos.x}, {pos.y}){' '}\n//                         </span>\n//                       ))}\n//                     </li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// return (\n// <div className=\"feed\" alt=\"brown thread\">\n//     <img src={threadImage} />\n//     <div>\n//         test\n//     </div>\n\n//     <Link to=\"login\">\n//         <button>Login</button>\n//     </Link>\n// </div>\n// )\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed() {\n  _s();\n  const [scrapData, setScrapData] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchScrapData = async () => {\n      try {\n        const res = await axios.get('http://localhost:4000/scrap-pages'); // Update endpoint if necessary\n        setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n      } catch (err) {\n        console.error('Error fetching scrapbook data:', err);\n        setError('Failed to load scrapbook data.');\n      }\n    };\n    fetchScrapData();\n  }, []);\n\n  // Function to extract Base64 string and prepend the MIME type\n  const extractBase64 = binaryObj => {\n    var _binaryObj$toString;\n    if (binaryObj && typeof binaryObj === 'object' && binaryObj.base64) {\n      return `data:image/jpeg;base64,${binaryObj.base64}`;\n    }\n    const base64String = binaryObj === null || binaryObj === void 0 ? void 0 : (_binaryObj$toString = binaryObj.toString()) === null || _binaryObj$toString === void 0 ? void 0 : _binaryObj$toString.match(/Binary\\.createFromBase64\\('(.*)',/);\n    if (base64String && base64String[1]) {\n      return `data:image/jpeg;base64,${base64String[1]}`; // Adjust MIME type as needed\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scrapbook Pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n        gap: '20px'\n      },\n      children: scrapData.map((page, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #ccc',\n          borderRadius: '10px',\n          padding: '10px',\n          backgroundColor: page.color || '#f9f9f9'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: page.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: page.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), page.binaryImages && page.binaryImages.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))',\n            gap: '10px'\n          },\n          children: page.binaryImages.map((image, imgIndex) => {\n            const imageSrc = extractBase64(image);\n            return imageSrc && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: imageSrc,\n              alt: `Scrapbook ${imgIndex}`,\n              style: {\n                width: '150px',\n                height: '150px',\n                objectFit: 'cover'\n              }\n            }, imgIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No images available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(Feed, \"H170TyuJG7PSaFCAsyzKL5mU1QE=\");\n_c = Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Feed","_s","scrapData","setScrapData","error","setError","fetchScrapData","res","get","data","err","console","extractBase64","binaryObj","_binaryObj$toString","base64","base64String","toString","match","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","color","marginBottom","display","gridTemplateColumns","gap","map","page","index","border","borderRadius","backgroundColor","name","description","binaryImages","length","image","imgIndex","imageSrc","src","alt","width","height","objectFit","_c","$RefreshReg$"],"sources":["/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/Feed.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// export default function Feed() {\n//     const [scrapData, setScrapData] = useState([]);\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         const fetchScrapData = async () => {\n//           try {\n//             const res = await axios.get('http://localhost:4000/scrap-pages'); // Update the endpoint if necessary\n//             setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n//           } catch (err) {\n//             console.error('Error fetching scrapbook data:', err);\n//             setError('Failed to load scrapbook data.');\n//           }\n//         };\n    \n//         fetchScrapData();\n//       }, []);\n\n//       return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Scrapbook Pages</h1>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div style={{ color: 'red', marginBottom: '10px' }}>\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Render Scrapbook Pages */}\n//       <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', gap: '20px' }}>\n//         {scrapData.map((page, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               border: '1px solid #ccc',\n//               borderRadius: '10px',\n//               padding: '10px',\n//               backgroundColor: page.color || '#f9f9f9',\n//             }}\n//           >\n//             <h3>{page.name}</h3>\n//             <p>{page.description}</p>\n\n//             {/* Render Images */}\n//             {page.binaryImages && page.binaryImages.length > 0 ? (\n//               <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))', gap: '10px' }}>\n//                 {page.binaryImages.map((image, index) => {\n//                     const bufferToBase64 = (bufferObj) => {\n//                         const byteArray = new Uint8Array(bufferObj.data); // Convert to Uint8Array\n//                         const base64String = new TextDecoder().decode(byteArray); // Decode to Base64 string\n//                         return base64String; // The result should include 'data:image/...'\n//                       };\n                      \n//                     const imageSrc = bufferToBase64(image);\n                      \n//                     return (\n//                         <img\n//                         key={index}\n//                         src={imageSrc}\n//                         alt={`Scrapbook ${index}`}\n//                         style={{ width: '150px', height: '150px', objectFit: 'cover' }}\n//                         />\n//                     );\n//                 })}\n//               </div>\n//             ) : (\n//               <p>No images available</p>\n//             )}\n\n//             {/* Stickers Section */}\n//             {page.stickers && page.stickers.length > 0 && (\n//               <div>\n//                 <h4>Stickers:</h4>\n//                 <ul>\n//                   {page.stickers.map((sticker, stickerIndex) => (\n//                     <li key={stickerIndex}>\n//                       Type: {sticker.stickerType}, Positions:{' '}\n//                       {sticker.position.map((pos, posIndex) => (\n//                         <span key={posIndex}>\n//                           ({pos.x}, {pos.y}){' '}\n//                         </span>\n//                       ))}\n//                     </li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n    // return (\n    // <div className=\"feed\" alt=\"brown thread\">\n    //     <img src={threadImage} />\n    //     <div>\n    //         test\n    //     </div>\n\n    //     <Link to=\"login\">\n    //         <button>Login</button>\n    //     </Link>\n    // </div>\n    // )\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nexport default function Feed() {\n  const [scrapData, setScrapData] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchScrapData = async () => {\n      try {\n        const res = await axios.get('http://localhost:4000/scrap-pages'); // Update endpoint if necessary\n        setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n      } catch (err) {\n        console.error('Error fetching scrapbook data:', err);\n        setError('Failed to load scrapbook data.');\n      }\n    };\n\n    fetchScrapData();\n  }, []);\n\n  // Function to extract Base64 string and prepend the MIME type\n  const extractBase64 = (binaryObj) => {\n    if (binaryObj && typeof binaryObj === 'object' && binaryObj.base64) {\n      return `data:image/jpeg;base64,${binaryObj.base64}`;\n    }\n\n    const base64String = binaryObj?.toString()?.match(/Binary\\.createFromBase64\\('(.*)',/);\n    if (base64String && base64String[1]) {\n      return `data:image/jpeg;base64,${base64String[1]}`; // Adjust MIME type as needed\n    }\n    return null;\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Scrapbook Pages</h1>\n\n      {/* Error Message */}\n      {error && (\n        <div style={{ color: 'red', marginBottom: '10px' }}>\n          {error}\n        </div>\n      )}\n\n      {/* Render Scrapbook Pages */}\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n          gap: '20px',\n        }}\n      >\n        {scrapData.map((page, index) => (\n          <div\n            key={index}\n            style={{\n              border: '1px solid #ccc',\n              borderRadius: '10px',\n              padding: '10px',\n              backgroundColor: page.color || '#f9f9f9',\n            }}\n          >\n            <h3>{page.name}</h3>\n            <p>{page.description}</p>\n\n            {/* Render Images */}\n            {page.binaryImages && page.binaryImages.length > 0 ? (\n              <div\n                style={{\n                  display: 'grid',\n                  gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))',\n                  gap: '10px',\n                }}\n              >\n                {page.binaryImages.map((image, imgIndex) => {\n                  const imageSrc = extractBase64(image);\n\n                  return (\n                    imageSrc && (\n                      <img\n                        key={imgIndex}\n                        src={imageSrc}\n                        alt={`Scrapbook ${imgIndex}`}\n                        style={{\n                          width: '150px',\n                          height: '150px',\n                          objectFit: 'cover',\n                        }}\n                      />\n                    )\n                  );\n                })}\n              </div>\n            ) : (\n              <p>No images available</p>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
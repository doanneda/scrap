{"ast":null,"code":"var _jsxFileName = \"/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/Feed.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// export default function Feed() {\n//     const [scrapData, setScrapData] = useState([]);\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         const fetchScrapData = async () => {\n//           try {\n//             const res = await axios.get('http://localhost:4000/scrap-pages'); // Update the endpoint if necessary\n//             setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n//           } catch (err) {\n//             console.error('Error fetching scrapbook data:', err);\n//             setError('Failed to load scrapbook data.');\n//           }\n//         };\n\n//         fetchScrapData();\n//       }, []);\n\n//       return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Scrapbook Pages</h1>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div style={{ color: 'red', marginBottom: '10px' }}>\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Render Scrapbook Pages */}\n//       <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', gap: '20px' }}>\n//         {scrapData.map((page, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               border: '1px solid #ccc',\n//               borderRadius: '10px',\n//               padding: '10px',\n//               backgroundColor: page.color || '#f9f9f9',\n//             }}\n//           >\n//             <h3>{page.name}</h3>\n//             <p>{page.description}</p>\n\n//             {/* Render Images */}\n//             {page.binaryImages && page.binaryImages.length > 0 ? (\n//               <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))', gap: '10px' }}>\n//                 {page.binaryImages.map((image, index) => {\n//                     const bufferToBase64 = (bufferObj) => {\n//                         const byteArray = new Uint8Array(bufferObj.data); // Convert to Uint8Array\n//                         const base64String = new TextDecoder().decode(byteArray); // Decode to Base64 string\n//                         return base64String; // The result should include 'data:image/...'\n//                       };\n\n//                     const imageSrc = bufferToBase64(image);\n\n//                     return (\n//                         <img\n//                         key={index}\n//                         src={imageSrc}\n//                         alt={`Scrapbook ${index}`}\n//                         style={{ width: '150px', height: '150px', objectFit: 'cover' }}\n//                         />\n//                     );\n//                 })}\n//               </div>\n//             ) : (\n//               <p>No images available</p>\n//             )}\n\n//             {/* Stickers Section */}\n//             {page.stickers && page.stickers.length > 0 && (\n//               <div>\n//                 <h4>Stickers:</h4>\n//                 <ul>\n//                   {page.stickers.map((sticker, stickerIndex) => (\n//                     <li key={stickerIndex}>\n//                       Type: {sticker.stickerType}, Positions:{' '}\n//                       {sticker.position.map((pos, posIndex) => (\n//                         <span key={posIndex}>\n//                           ({pos.x}, {pos.y}){' '}\n//                         </span>\n//                       ))}\n//                     </li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// return (\n// <div className=\"feed\" alt=\"brown thread\">\n//     <img src={threadImage} />\n//     <div>\n//         test\n//     </div>\n\n//     <Link to=\"login\">\n//         <button>Login</button>\n//     </Link>\n// </div>\n// )\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed() {\n  _s();\n  const [scrapData, setScrapData] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchScrapData = async () => {\n      try {\n        const res = await axios.get('http://localhost:4000/scrap-pages'); // Update the endpoint if necessary\n        setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n      } catch (err) {\n        console.error('Error fetching scrapbook data:', err);\n        setError('Failed to load scrapbook data.');\n      }\n    };\n    fetchScrapData();\n  }, []);\n\n  // Function to convert binary data to Base64\n  const bufferToBase64 = bufferObj => {\n    const base64String = btoa(new Uint8Array(bufferObj.data).reduce((data, byte) => data + String.fromCharCode(byte), ''));\n    return `data:image/jpeg;base64,${base64String}`; // Replace \"jpeg\" with the correct MIME type if necessary\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scrapbook Pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n        gap: '20px'\n      },\n      children: scrapData.map((page, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #ccc',\n          borderRadius: '10px',\n          padding: '10px',\n          backgroundColor: page.color || '#f9f9f9'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: page.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: page.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), page.binaryImages && page.binaryImages.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))',\n            gap: '10px'\n          },\n          children: page.binaryImages.map((image, imgIndex) => {\n            const imageSrc = bufferToBase64(image);\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: imageSrc,\n              alt: `Scrapbook ${imgIndex}`,\n              style: {\n                width: '150px',\n                height: '150px',\n                objectFit: 'cover'\n              }\n            }, imgIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No images available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this), page.stickers && page.stickers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Stickers:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: page.stickers.map((sticker, stickerIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Type: \", sticker.stickerType, \", Positions:\", ' ', sticker.position.map((pos, posIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"(\", pos.x, \", \", pos.y, \")\", ' ']\n              }, posIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 25\n              }, this))]\n            }, stickerIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(Feed, \"H170TyuJG7PSaFCAsyzKL5mU1QE=\");\n_c = Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Feed","_s","scrapData","setScrapData","error","setError","fetchScrapData","res","get","data","err","console","bufferToBase64","bufferObj","base64String","btoa","Uint8Array","reduce","byte","String","fromCharCode","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","color","marginBottom","display","gridTemplateColumns","gap","map","page","index","border","borderRadius","backgroundColor","name","description","binaryImages","length","image","imgIndex","imageSrc","src","alt","width","height","objectFit","stickers","sticker","stickerIndex","stickerType","position","pos","posIndex","x","y","_c","$RefreshReg$"],"sources":["/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/Feed.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// export default function Feed() {\n//     const [scrapData, setScrapData] = useState([]);\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         const fetchScrapData = async () => {\n//           try {\n//             const res = await axios.get('http://localhost:4000/scrap-pages'); // Update the endpoint if necessary\n//             setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n//           } catch (err) {\n//             console.error('Error fetching scrapbook data:', err);\n//             setError('Failed to load scrapbook data.');\n//           }\n//         };\n    \n//         fetchScrapData();\n//       }, []);\n\n//       return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Scrapbook Pages</h1>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div style={{ color: 'red', marginBottom: '10px' }}>\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Render Scrapbook Pages */}\n//       <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', gap: '20px' }}>\n//         {scrapData.map((page, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               border: '1px solid #ccc',\n//               borderRadius: '10px',\n//               padding: '10px',\n//               backgroundColor: page.color || '#f9f9f9',\n//             }}\n//           >\n//             <h3>{page.name}</h3>\n//             <p>{page.description}</p>\n\n//             {/* Render Images */}\n//             {page.binaryImages && page.binaryImages.length > 0 ? (\n//               <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))', gap: '10px' }}>\n//                 {page.binaryImages.map((image, index) => {\n//                     const bufferToBase64 = (bufferObj) => {\n//                         const byteArray = new Uint8Array(bufferObj.data); // Convert to Uint8Array\n//                         const base64String = new TextDecoder().decode(byteArray); // Decode to Base64 string\n//                         return base64String; // The result should include 'data:image/...'\n//                       };\n                      \n//                     const imageSrc = bufferToBase64(image);\n                      \n//                     return (\n//                         <img\n//                         key={index}\n//                         src={imageSrc}\n//                         alt={`Scrapbook ${index}`}\n//                         style={{ width: '150px', height: '150px', objectFit: 'cover' }}\n//                         />\n//                     );\n//                 })}\n//               </div>\n//             ) : (\n//               <p>No images available</p>\n//             )}\n\n//             {/* Stickers Section */}\n//             {page.stickers && page.stickers.length > 0 && (\n//               <div>\n//                 <h4>Stickers:</h4>\n//                 <ul>\n//                   {page.stickers.map((sticker, stickerIndex) => (\n//                     <li key={stickerIndex}>\n//                       Type: {sticker.stickerType}, Positions:{' '}\n//                       {sticker.position.map((pos, posIndex) => (\n//                         <span key={posIndex}>\n//                           ({pos.x}, {pos.y}){' '}\n//                         </span>\n//                       ))}\n//                     </li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n    // return (\n    // <div className=\"feed\" alt=\"brown thread\">\n    //     <img src={threadImage} />\n    //     <div>\n    //         test\n    //     </div>\n\n    //     <Link to=\"login\">\n    //         <button>Login</button>\n    //     </Link>\n    // </div>\n    // )\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nexport default function Feed() {\n  const [scrapData, setScrapData] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchScrapData = async () => {\n      try {\n        const res = await axios.get('http://localhost:4000/scrap-pages'); // Update the endpoint if necessary\n        setScrapData(res.data); // Assuming the response contains an array of scrapbook data\n      } catch (err) {\n        console.error('Error fetching scrapbook data:', err);\n        setError('Failed to load scrapbook data.');\n      }\n    };\n\n    fetchScrapData();\n  }, []);\n\n  // Function to convert binary data to Base64\n  const bufferToBase64 = (bufferObj) => {\n    const base64String = btoa(\n      new Uint8Array(bufferObj.data)\n        .reduce((data, byte) => data + String.fromCharCode(byte), '')\n    );\n    return `data:image/jpeg;base64,${base64String}`; // Replace \"jpeg\" with the correct MIME type if necessary\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Scrapbook Pages</h1>\n\n      {/* Error Message */}\n      {error && (\n        <div style={{ color: 'red', marginBottom: '10px' }}>\n          {error}\n        </div>\n      )}\n\n      {/* Render Scrapbook Pages */}\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', gap: '20px' }}>\n        {scrapData.map((page, index) => (\n          <div\n            key={index}\n            style={{\n              border: '1px solid #ccc',\n              borderRadius: '10px',\n              padding: '10px',\n              backgroundColor: page.color || '#f9f9f9',\n            }}\n          >\n            <h3>{page.name}</h3>\n            <p>{page.description}</p>\n\n            {/* Render Images */}\n            {page.binaryImages && page.binaryImages.length > 0 ? (\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(100px, 1fr))', gap: '10px' }}>\n                {page.binaryImages.map((image, imgIndex) => {\n                  const imageSrc = bufferToBase64(image);\n\n                  return (\n                    <img\n                      key={imgIndex}\n                      src={imageSrc}\n                      alt={`Scrapbook ${imgIndex}`}\n                      style={{ width: '150px', height: '150px', objectFit: 'cover' }}\n                    />\n                  );\n                })}\n              </div>\n            ) : (\n              <p>No images available</p>\n            )}\n\n            {/* Stickers Section */}\n            {page.stickers && page.stickers.length > 0 && (\n              <div>\n                <h4>Stickers:</h4>\n                <ul>\n                  {page.stickers.map((sticker, stickerIndex) => (\n                    <li key={stickerIndex}>\n                      Type: {sticker.stickerType}, Positions:{' '}\n                      {sticker.position.map((pos, posIndex) => (\n                        <span key={posIndex}>\n                          ({pos.x}, {pos.y}){' '}\n                        </span>\n                      ))}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACJ;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,mCAAmC,CAAC,CAAC,CAAC;QAClEL,YAAY,CAACI,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACP,KAAK,CAAC,gCAAgC,EAAEM,GAAG,CAAC;QACpDL,QAAQ,CAAC,gCAAgC,CAAC;MAC5C;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,cAAc,GAAIC,SAAS,IAAK;IACpC,MAAMC,YAAY,GAAGC,IAAI,CACvB,IAAIC,UAAU,CAACH,SAAS,CAACJ,IAAI,CAAC,CAC3BQ,MAAM,CAAC,CAACR,IAAI,EAAES,IAAI,KAAKT,IAAI,GAAGU,MAAM,CAACC,YAAY,CAACF,IAAI,CAAC,EAAE,EAAE,CAChE,CAAC;IACD,OAAO,0BAA0BJ,YAAY,EAAE,CAAC,CAAC;EACnD,CAAC;EAED,oBACEf,OAAA;IAAKsB,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BxB,OAAA;MAAAwB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGvBvB,KAAK,iBACJL,OAAA;MAAKsB,KAAK,EAAE;QAAEO,KAAK,EAAE,KAAK;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAN,QAAA,EAChDnB;IAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAGD5B,OAAA;MAAKsB,KAAK,EAAE;QAAES,OAAO,EAAE,MAAM;QAAEC,mBAAmB,EAAE,uCAAuC;QAAEC,GAAG,EAAE;MAAO,CAAE;MAAAT,QAAA,EACxGrB,SAAS,CAAC+B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzBpC,OAAA;QAEEsB,KAAK,EAAE;UACLe,MAAM,EAAE,gBAAgB;UACxBC,YAAY,EAAE,MAAM;UACpBf,OAAO,EAAE,MAAM;UACfgB,eAAe,EAAEJ,IAAI,CAACN,KAAK,IAAI;QACjC,CAAE;QAAAL,QAAA,gBAEFxB,OAAA;UAAAwB,QAAA,EAAKW,IAAI,CAACK;QAAI;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpB5B,OAAA;UAAAwB,QAAA,EAAIW,IAAI,CAACM;QAAW;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAGxBO,IAAI,CAACO,YAAY,IAAIP,IAAI,CAACO,YAAY,CAACC,MAAM,GAAG,CAAC,gBAChD3C,OAAA;UAAKsB,KAAK,EAAE;YAAES,OAAO,EAAE,MAAM;YAAEC,mBAAmB,EAAE,uCAAuC;YAAEC,GAAG,EAAE;UAAO,CAAE;UAAAT,QAAA,EACxGW,IAAI,CAACO,YAAY,CAACR,GAAG,CAAC,CAACU,KAAK,EAAEC,QAAQ,KAAK;YAC1C,MAAMC,QAAQ,GAAGjC,cAAc,CAAC+B,KAAK,CAAC;YAEtC,oBACE5C,OAAA;cAEE+C,GAAG,EAAED,QAAS;cACdE,GAAG,EAAE,aAAaH,QAAQ,EAAG;cAC7BvB,KAAK,EAAE;gBAAE2B,KAAK,EAAE,OAAO;gBAAEC,MAAM,EAAE,OAAO;gBAAEC,SAAS,EAAE;cAAQ;YAAE,GAH1DN,QAAQ;cAAApB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAId,CAAC;UAEN,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,gBAEN5B,OAAA;UAAAwB,QAAA,EAAG;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAC1B,EAGAO,IAAI,CAACiB,QAAQ,IAAIjB,IAAI,CAACiB,QAAQ,CAACT,MAAM,GAAG,CAAC,iBACxC3C,OAAA;UAAAwB,QAAA,gBACExB,OAAA;YAAAwB,QAAA,EAAI;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClB5B,OAAA;YAAAwB,QAAA,EACGW,IAAI,CAACiB,QAAQ,CAAClB,GAAG,CAAC,CAACmB,OAAO,EAAEC,YAAY,kBACvCtD,OAAA;cAAAwB,QAAA,GAAuB,QACf,EAAC6B,OAAO,CAACE,WAAW,EAAC,cAAY,EAAC,GAAG,EAC1CF,OAAO,CAACG,QAAQ,CAACtB,GAAG,CAAC,CAACuB,GAAG,EAAEC,QAAQ,kBAClC1D,OAAA;gBAAAwB,QAAA,GAAqB,GAClB,EAACiC,GAAG,CAACE,CAAC,EAAC,IAAE,EAACF,GAAG,CAACG,CAAC,EAAC,GAAC,EAAC,GAAG;cAAA,GADbF,QAAQ;gBAAAjC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEb,CACP,CAAC;YAAA,GANK0B,YAAY;cAAA7B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOjB,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CACN;MAAA,GAhDIQ,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiDP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC1B,EAAA,CAhGuBD,IAAI;AAAA4D,EAAA,GAAJ5D,IAAI;AAAA,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
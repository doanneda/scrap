{"ast":null,"code":"var _jsxFileName = \"/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/CreatePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreatePage() {\n  _s();\n  const [numImages, setNumImages] = useState(1);\n  const [images, setImages] = useState([]);\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n  const name = \"TEST3\";\n  const color = \"paleGreen\";\n  const stickers = [{\n    \"stickerType\": \"emoji\",\n    \"position\": [{\n      \"x\": 10,\n      \"y\": 20\n    }, {\n      \"x\": 30,\n      \"y\": 40\n    }]\n  }];\n  const handleNumImagesChange = event => {\n    const newNumImages = parseInt(event.target.value, 10);\n    setNumImages(newNumImages);\n    setImages(Array(newNumImages).fill(null));\n    setError('');\n  };\n  const handleFileChange = (index, event) => {\n    const file = event.target.files[0];\n    if (!file) return; // Prevent errors if no file is selected\n    const updatedImages = [...images];\n    updatedImages[index] = file;\n    setImages(updatedImages);\n    setError('');\n  };\n  const handleRemove = index => {\n    const updatedImages = [...images];\n    updatedImages[index] = null;\n    setImages(updatedImages);\n  };\n  const handleUpload = async () => {\n    if (images.filter(image => image !== null).length !== numImages) {\n      setError(`Please upload all ${numImages} images before proceeding.`);\n      return;\n    }\n    if (!description.trim()) {\n      setError(\"Description cannot be empty.\");\n      return;\n    }\n    const imagePromises = images.map(file => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const arrayBuffer = reader.result;\n          const buffer = Buffer.from(new Uint8Array(arrayBuffer));\n          resolve(buffer);\n        };\n        reader.onerror = reject;\n        reader.readAsArrayBuffer(file);\n      });\n    });\n    try {\n      const binaryImages = await Promise.all(imagePromises);\n      const scrapData = {\n        name,\n        binaryImages,\n        description,\n        color,\n        stickers\n      };\n      const res = await axios.post(`${process.env.REACT_APP_SERVER_URL || \"http://localhost:4000\"}/scrap-pages/post`, scrapData);\n      if (res.data.error) {\n        console.error(res.data.error);\n      } else {\n        alert('Upload successful!');\n      }\n    } catch (err) {\n      console.error(err.message);\n      setError(\"An error occurred during upload. Please try again.\");\n    }\n    setError('');\n    setImages(Array(numImages).fill(null));\n    setDescription('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select number of images:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: numImages,\n        onChange: handleNumImagesChange,\n        children: [1, 2, 3, 4].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: num,\n          children: num\n        }, num, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n        gap: '10px'\n      },\n      children: Array.from({\n        length: numImages\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          textAlign: 'center'\n        },\n        children: images[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: URL.createObjectURL(images[index]),\n            alt: \"Preview\",\n            style: {\n              width: '100px',\n              height: '100px',\n              objectFit: 'cover'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemove(index),\n            style: {\n              position: 'absolute',\n              top: 0,\n              right: 0,\n              backgroundColor: 'red',\n              color: 'white',\n              border: 'none',\n              borderRadius: '50%',\n              width: '20px',\n              height: '20px',\n              cursor: 'pointer'\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100px',\n              height: '100px',\n              border: '1px dashed gray',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer'\n            },\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            style: {\n              display: 'none'\n            },\n            onChange: e => handleFileChange(index, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: description,\n      onChange: e => setDescription(e.target.value),\n      placeholder: \"Enter a description here...\",\n      style: {\n        width: '100%',\n        height: '80px',\n        marginTop: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n// // import { Link } from 'react-router-dom';\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// // import Storage from './Storage';\n\n// export default function CreatePage() {\n//   const [numImages, setNumImages] = useState(1); // Number of image slots (1 to 4)\n//   const [images, setImages] = useState([]); // Store the uploaded images\n//   const [description, setDescription] = useState(''); // Store the description\n//   const [error, setError] = useState(''); // Error message for validation feedback\n//   const name = \"TEST3\"\n//   const color = \"paleGreen\"\n//   const stickers = [\n//     {\n//       \"stickerType\": \"emoji\",\n//       \"position\": [\n//         { \"x\": 10, \"y\": 20 },\n//         { \"x\": 30, \"y\": 40 }\n//       ]\n//     },\n//   ]\n\n//   const handleNumImagesChange = (event) => {\n//     const newNumImages = parseInt(event.target.value, 10);\n//     setNumImages(newNumImages);\n//     setImages(Array(newNumImages).fill(null)); // Reset images array to match the new count\n//     setError(''); // Clear error when images changed\n//   };\n\n//   const handleFileChange = (index, event) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = event.target.files[0];\n//     setImages(updatedImages);\n//     setError(''); \n//   };\n\n//   // Removing images\n//   const handleRemove = (index) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = null;\n//     setImages(updatedImages);\n//   };\n\n//   const handleUpload = async () => {\n//     // Check if all required images are uploaded\n//     if (images.filter((image) => image !== null).length !== numImages) {\n//       setError(`Please upload all ${numImages} images before proceeding.`);\n//       return;\n//     }\n\n//     // If all images are uploaded, proceed with upload logic\n//     console.log('Selected Images:', images);\n//     console.log('Description:', description);\n\n//     // Convert images to binary\n//     const imagePromises = images.map((file) => {\n//       return new Promise((resolve, reject) => {\n//           const reader = new FileReader();\n//           reader.onloadend = () => {\n//             const base64Image = reader.result;  // This will be a base64-encoded string\n//             resolve(base64Image);\n//             // const arrayBuffer = reader.result;\n//             // const buffer = Buffer.from(arrayBuffer);  // Convert ArrayBuffer to Buffer\n//             // resolve(buffer);  // Resolve the promise with the buffer\n//           };    \n//           // reader.onloadend = () => resolve(reader.result);  // Convert to binary data\n//           reader.onerror = reject;\n//           reader.readAsArrayBuffer(file);  // Reads the file as binary\n//       });\n//     });\n\n//     // Upload the images to MongoDB\n//     try {\n//       const binaryImages = await Promise.all(imagePromises);\n//       console.log(imagePromises)\n//       console.log(binaryImages) \n\n//       const scrapData = {\n//         name,\n//         binaryImages,\n//         description,\n//         color,\n//         stickers\n//       };\n\n//       console.log(\"Sending scrapdata to axios...\")\n//       const res = await axios.post(\"http://localhost:4000/scrap-pages/post\", scrapData);\n\n//       // const res = await axios.post(`${process.env.EXPO_PUBLIC_SERVER_URL}/scrap-pages/post`, scrapData);\n//       console.log(\"SUCCESSFUL AXIOS\")\n//       if (res.data.error) {\n//         console.error(res.data.error);\n//       } else {\n//         const userId = res.data._id;\n//         console.log(\"storing user id...\")\n//         await Storage({ key: 'userId', value: userId, saveKey: true });\n//         console.log(\"SUCCESFFUL STORAGE!\")\n//         // navigation.navigate('Home');\n//       }\n//     } catch (err) {\n//       console.log(err.message);\n//     }\n\n//     // Reset state\n//     setError('');\n//     setImages(Array(numImages).fill(null));\n//     setDescription('');\n//     alert('Upload successful!');\n//   };\n\n//   return (\n//     <div>\n//       {/* Dropdown for Number of Images */}\n//       <div>\n//         <label>\n//           Select number of images:\n//           <select\n//             value={numImages}\n//             onChange={handleNumImagesChange}\n//           >\n//             {[1, 2, 3, 4].map((num) => (\n//               <option key={num} value={num}>\n//                 {num}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//       </div>\n\n//       {/* Dynamic Grid */}\n//       <div\n//         style={{\n//           display: 'grid',\n//           gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n//           gap: '10px',\n//         }}\n//       >\n//         {Array.from({ length: numImages }).map((_, index) => (\n//           <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n//             {images[index] ? (\n//               <>\n//                 <img\n//                   src={URL.createObjectURL(images[index])}\n//                   alt=\"Preview\"\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     objectFit: 'cover',\n//                   }}\n//                 />\n//                 <button\n//                   onClick={() => handleRemove(index)}\n//                   style={{\n//                     position: 'absolute',\n//                     top: 0,\n//                     right: 0,\n//                     backgroundColor: 'red',\n//                     color: 'white',\n//                     border: 'none',\n//                     borderRadius: '50%',\n//                     width: '20px',\n//                     height: '20px',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   &times;\n//                 </button>\n//               </>\n//             ) : (\n//               <label>\n//                 <div\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     border: '1px dashed gray',\n//                     display: 'flex',\n//                     alignItems: 'center',\n//                     justifyContent: 'center',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   +\n//                 </div>\n//                 <input\n//                   type=\"file\"\n//                   style={{ display: 'none' }}\n//                   onChange={(e) => handleFileChange(index, e)}\n//                 />\n//               </label>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Text Input Section */}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           placeholder=\"Enter a description here...\"\n//           style={{\n//             width: '100%',\n//             height: '80px',\n//             padding: '10px',\n//             fontSize: '14px',\n//             border: '1px solid gray',\n//             borderRadius: '5px',\n//           }}\n//         ></textarea>\n//       </div>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div\n//           style={{\n//             marginTop: '10px',\n//             color: 'red',\n//             fontSize: '14px',\n//           }}\n//         >\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Upload Button */}\n//       <button\n//         onClick={handleUpload}\n//         style={{\n//           marginTop: '20px',\n//           padding: '10px 20px',\n//           backgroundColor: 'blue',\n//           color: 'white',\n//           border: 'none',\n//           borderRadius: '5px',\n//           cursor: 'pointer',\n//         }}\n//       >\n//         Upload\n//       </button>\n//     </div>\n\n//     // <Link to=\"login\">\n//     //     <button>Login</button>\n//     // </Link>\n//   );\n// }\n_s(CreatePage, \"Z7iK1PcT+GZS2NS72sllTr16Uss=\");\n_c = CreatePage;\nvar _c;\n$RefreshReg$(_c, \"CreatePage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","CreatePage","_s","numImages","setNumImages","images","setImages","description","setDescription","error","setError","name","color","stickers","handleNumImagesChange","event","newNumImages","parseInt","target","value","Array","fill","handleFileChange","index","file","files","updatedImages","handleRemove","handleUpload","filter","image","length","trim","imagePromises","map","Promise","resolve","reject","reader","FileReader","onloadend","arrayBuffer","result","buffer","Buffer","from","Uint8Array","onerror","readAsArrayBuffer","binaryImages","all","scrapData","res","post","process","env","REACT_APP_SERVER_URL","data","console","alert","err","message","children","onChange","num","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","Math","min","gap","_","position","textAlign","src","URL","createObjectURL","alt","width","height","objectFit","onClick","top","right","backgroundColor","border","borderRadius","cursor","alignItems","justifyContent","type","e","placeholder","marginTop","_c","$RefreshReg$"],"sources":["/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/CreatePage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nexport default function CreatePage() {\n  const [numImages, setNumImages] = useState(1);\n  const [images, setImages] = useState([]);\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n  const name = \"TEST3\";\n  const color = \"paleGreen\";\n  const stickers = [\n    {\n      \"stickerType\": \"emoji\",\n      \"position\": [\n        { \"x\": 10, \"y\": 20 },\n        { \"x\": 30, \"y\": 40 },\n      ],\n    },\n  ];\n\n  const handleNumImagesChange = (event) => {\n    const newNumImages = parseInt(event.target.value, 10);\n    setNumImages(newNumImages);\n    setImages(Array(newNumImages).fill(null));\n    setError('');\n  };\n\n  const handleFileChange = (index, event) => {\n    const file = event.target.files[0];\n    if (!file) return; // Prevent errors if no file is selected\n    const updatedImages = [...images];\n    updatedImages[index] = file;\n    setImages(updatedImages);\n    setError('');\n  };\n\n  const handleRemove = (index) => {\n    const updatedImages = [...images];\n    updatedImages[index] = null;\n    setImages(updatedImages);\n  };\n\n  const handleUpload = async () => {\n    if (images.filter((image) => image !== null).length !== numImages) {\n      setError(`Please upload all ${numImages} images before proceeding.`);\n      return;\n    }\n    if (!description.trim()) {\n      setError(\"Description cannot be empty.\");\n      return;\n    }\n\n    const imagePromises = images.map((file) => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const arrayBuffer = reader.result;\n          const buffer = Buffer.from(new Uint8Array(arrayBuffer));\n          resolve(buffer);\n        };\n        reader.onerror = reject;\n        reader.readAsArrayBuffer(file);\n      });\n    });\n\n    try {\n      const binaryImages = await Promise.all(imagePromises);\n\n      const scrapData = {\n        name,\n        binaryImages,\n        description,\n        color,\n        stickers,\n      };\n\n      const res = await axios.post(\n        `${process.env.REACT_APP_SERVER_URL || \"http://localhost:4000\"}/scrap-pages/post`,\n        scrapData\n      );\n\n      if (res.data.error) {\n        console.error(res.data.error);\n      } else {\n        alert('Upload successful!');\n      }\n    } catch (err) {\n      console.error(err.message);\n      setError(\"An error occurred during upload. Please try again.\");\n    }\n\n    setError('');\n    setImages(Array(numImages).fill(null));\n    setDescription('');\n  };\n\n  return (\n    <div>\n      <label>\n        Select number of images:\n        <select value={numImages} onChange={handleNumImagesChange}>\n          {[1, 2, 3, 4].map((num) => (\n            <option key={num} value={num}>\n              {num}\n            </option>\n          ))}\n        </select>\n      </label>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n          gap: '10px',\n        }}\n      >\n        {Array.from({ length: numImages }).map((_, index) => (\n          <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n            {images[index] ? (\n              <>\n                <img\n                  src={URL.createObjectURL(images[index])}\n                  alt=\"Preview\"\n                  style={{\n                    width: '100px',\n                    height: '100px',\n                    objectFit: 'cover',\n                  }}\n                />\n                <button\n                  onClick={() => handleRemove(index)}\n                  style={{\n                    position: 'absolute',\n                    top: 0,\n                    right: 0,\n                    backgroundColor: 'red',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '50%',\n                    width: '20px',\n                    height: '20px',\n                    cursor: 'pointer',\n                  }}\n                >\n                  &times;\n                </button>\n              </>\n            ) : (\n              <label>\n                <div\n                  style={{\n                    width: '100px',\n                    height: '100px',\n                    border: '1px dashed gray',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    cursor: 'pointer',\n                  }}\n                >\n                  +\n                </div>\n                <input\n                  type=\"file\"\n                  style={{ display: 'none' }}\n                  onChange={(e) => handleFileChange(index, e)}\n                />\n              </label>\n            )}\n          </div>\n        ))}\n      </div>\n      <textarea\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n        placeholder=\"Enter a description here...\"\n        style={{\n          width: '100%',\n          height: '80px',\n          marginTop: '20px',\n        }}\n      ></textarea>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      <button onClick={handleUpload}>Upload</button>\n    </div>\n  );\n}\n\n\n// // import { Link } from 'react-router-dom';\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// // import Storage from './Storage';\n\n// export default function CreatePage() {\n//   const [numImages, setNumImages] = useState(1); // Number of image slots (1 to 4)\n//   const [images, setImages] = useState([]); // Store the uploaded images\n//   const [description, setDescription] = useState(''); // Store the description\n//   const [error, setError] = useState(''); // Error message for validation feedback\n//   const name = \"TEST3\"\n//   const color = \"paleGreen\"\n//   const stickers = [\n//     {\n//       \"stickerType\": \"emoji\",\n//       \"position\": [\n//         { \"x\": 10, \"y\": 20 },\n//         { \"x\": 30, \"y\": 40 }\n//       ]\n//     },\n//   ]\n\n//   const handleNumImagesChange = (event) => {\n//     const newNumImages = parseInt(event.target.value, 10);\n//     setNumImages(newNumImages);\n//     setImages(Array(newNumImages).fill(null)); // Reset images array to match the new count\n//     setError(''); // Clear error when images changed\n//   };\n\n//   const handleFileChange = (index, event) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = event.target.files[0];\n//     setImages(updatedImages);\n//     setError(''); \n//   };\n\n//   // Removing images\n//   const handleRemove = (index) => {\n//     const updatedImages = [...images];\n//     updatedImages[index] = null;\n//     setImages(updatedImages);\n//   };\n\n//   const handleUpload = async () => {\n//     // Check if all required images are uploaded\n//     if (images.filter((image) => image !== null).length !== numImages) {\n//       setError(`Please upload all ${numImages} images before proceeding.`);\n//       return;\n//     }\n\n//     // If all images are uploaded, proceed with upload logic\n//     console.log('Selected Images:', images);\n//     console.log('Description:', description);\n    \n//     // Convert images to binary\n//     const imagePromises = images.map((file) => {\n//       return new Promise((resolve, reject) => {\n//           const reader = new FileReader();\n//           reader.onloadend = () => {\n//             const base64Image = reader.result;  // This will be a base64-encoded string\n//             resolve(base64Image);\n//             // const arrayBuffer = reader.result;\n//             // const buffer = Buffer.from(arrayBuffer);  // Convert ArrayBuffer to Buffer\n//             // resolve(buffer);  // Resolve the promise with the buffer\n//           };    \n//           // reader.onloadend = () => resolve(reader.result);  // Convert to binary data\n//           reader.onerror = reject;\n//           reader.readAsArrayBuffer(file);  // Reads the file as binary\n//       });\n//     });\n\n//     // Upload the images to MongoDB\n//     try {\n//       const binaryImages = await Promise.all(imagePromises);\n//       console.log(imagePromises)\n//       console.log(binaryImages) \n\n//       const scrapData = {\n//         name,\n//         binaryImages,\n//         description,\n//         color,\n//         stickers\n//       };\n\n//       console.log(\"Sending scrapdata to axios...\")\n//       const res = await axios.post(\"http://localhost:4000/scrap-pages/post\", scrapData);\n      \n//       // const res = await axios.post(`${process.env.EXPO_PUBLIC_SERVER_URL}/scrap-pages/post`, scrapData);\n//       console.log(\"SUCCESSFUL AXIOS\")\n//       if (res.data.error) {\n//         console.error(res.data.error);\n//       } else {\n//         const userId = res.data._id;\n//         console.log(\"storing user id...\")\n//         await Storage({ key: 'userId', value: userId, saveKey: true });\n//         console.log(\"SUCCESFFUL STORAGE!\")\n//         // navigation.navigate('Home');\n//       }\n//     } catch (err) {\n//       console.log(err.message);\n//     }\n\n//     // Reset state\n//     setError('');\n//     setImages(Array(numImages).fill(null));\n//     setDescription('');\n//     alert('Upload successful!');\n//   };\n\n//   return (\n//     <div>\n//       {/* Dropdown for Number of Images */}\n//       <div>\n//         <label>\n//           Select number of images:\n//           <select\n//             value={numImages}\n//             onChange={handleNumImagesChange}\n//           >\n//             {[1, 2, 3, 4].map((num) => (\n//               <option key={num} value={num}>\n//                 {num}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//       </div>\n\n//       {/* Dynamic Grid */}\n//       <div\n//         style={{\n//           display: 'grid',\n//           gridTemplateColumns: `repeat(${Math.min(2, numImages)}, 1fr)`,\n//           gap: '10px',\n//         }}\n//       >\n//         {Array.from({ length: numImages }).map((_, index) => (\n//           <div key={index} style={{ position: 'relative', textAlign: 'center' }}>\n//             {images[index] ? (\n//               <>\n//                 <img\n//                   src={URL.createObjectURL(images[index])}\n//                   alt=\"Preview\"\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     objectFit: 'cover',\n//                   }}\n//                 />\n//                 <button\n//                   onClick={() => handleRemove(index)}\n//                   style={{\n//                     position: 'absolute',\n//                     top: 0,\n//                     right: 0,\n//                     backgroundColor: 'red',\n//                     color: 'white',\n//                     border: 'none',\n//                     borderRadius: '50%',\n//                     width: '20px',\n//                     height: '20px',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   &times;\n//                 </button>\n//               </>\n//             ) : (\n//               <label>\n//                 <div\n//                   style={{\n//                     width: '100px',\n//                     height: '100px',\n//                     border: '1px dashed gray',\n//                     display: 'flex',\n//                     alignItems: 'center',\n//                     justifyContent: 'center',\n//                     cursor: 'pointer',\n//                   }}\n//                 >\n//                   +\n//                 </div>\n//                 <input\n//                   type=\"file\"\n//                   style={{ display: 'none' }}\n//                   onChange={(e) => handleFileChange(index, e)}\n//                 />\n//               </label>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Text Input Section */}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           placeholder=\"Enter a description here...\"\n//           style={{\n//             width: '100%',\n//             height: '80px',\n//             padding: '10px',\n//             fontSize: '14px',\n//             border: '1px solid gray',\n//             borderRadius: '5px',\n//           }}\n//         ></textarea>\n//       </div>\n\n//       {/* Error Message */}\n//       {error && (\n//         <div\n//           style={{\n//             marginTop: '10px',\n//             color: 'red',\n//             fontSize: '14px',\n//           }}\n//         >\n//           {error}\n//         </div>\n//       )}\n\n//       {/* Upload Button */}\n//       <button\n//         onClick={handleUpload}\n//         style={{\n//           marginTop: '20px',\n//           padding: '10px 20px',\n//           backgroundColor: 'blue',\n//           color: 'white',\n//           border: 'none',\n//           borderRadius: '5px',\n//           cursor: 'pointer',\n//         }}\n//       >\n//         Upload\n//       </button>\n//     </div>\n    \n\n//     // <Link to=\"login\">\n//     //     <button>Login</button>\n//     // </Link>\n//   );\n// }\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMgB,IAAI,GAAG,OAAO;EACpB,MAAMC,KAAK,GAAG,WAAW;EACzB,MAAMC,QAAQ,GAAG,CACf;IACE,aAAa,EAAE,OAAO;IACtB,UAAU,EAAE,CACV;MAAE,GAAG,EAAE,EAAE;MAAE,GAAG,EAAE;IAAG,CAAC,EACpB;MAAE,GAAG,EAAE,EAAE;MAAE,GAAG,EAAE;IAAG,CAAC;EAExB,CAAC,CACF;EAED,MAAMC,qBAAqB,GAAIC,KAAK,IAAK;IACvC,MAAMC,YAAY,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,EAAE,EAAE,CAAC;IACrDf,YAAY,CAACY,YAAY,CAAC;IAC1BV,SAAS,CAACc,KAAK,CAACJ,YAAY,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAAC;IACzCX,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAMY,gBAAgB,GAAGA,CAACC,KAAK,EAAER,KAAK,KAAK;IACzC,MAAMS,IAAI,GAAGT,KAAK,CAACG,MAAM,CAACO,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACD,IAAI,EAAE,OAAO,CAAC;IACnB,MAAME,aAAa,GAAG,CAAC,GAAGrB,MAAM,CAAC;IACjCqB,aAAa,CAACH,KAAK,CAAC,GAAGC,IAAI;IAC3BlB,SAAS,CAACoB,aAAa,CAAC;IACxBhB,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAMiB,YAAY,GAAIJ,KAAK,IAAK;IAC9B,MAAMG,aAAa,GAAG,CAAC,GAAGrB,MAAM,CAAC;IACjCqB,aAAa,CAACH,KAAK,CAAC,GAAG,IAAI;IAC3BjB,SAAS,CAACoB,aAAa,CAAC;EAC1B,CAAC;EAED,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIvB,MAAM,CAACwB,MAAM,CAAEC,KAAK,IAAKA,KAAK,KAAK,IAAI,CAAC,CAACC,MAAM,KAAK5B,SAAS,EAAE;MACjEO,QAAQ,CAAC,qBAAqBP,SAAS,4BAA4B,CAAC;MACpE;IACF;IACA,IAAI,CAACI,WAAW,CAACyB,IAAI,CAAC,CAAC,EAAE;MACvBtB,QAAQ,CAAC,8BAA8B,CAAC;MACxC;IACF;IAEA,MAAMuB,aAAa,GAAG5B,MAAM,CAAC6B,GAAG,CAAEV,IAAI,IAAK;MACzC,OAAO,IAAIW,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;UACvB,MAAMC,WAAW,GAAGH,MAAM,CAACI,MAAM;UACjC,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAIC,UAAU,CAACL,WAAW,CAAC,CAAC;UACvDL,OAAO,CAACO,MAAM,CAAC;QACjB,CAAC;QACDL,MAAM,CAACS,OAAO,GAAGV,MAAM;QACvBC,MAAM,CAACU,iBAAiB,CAACxB,IAAI,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI;MACF,MAAMyB,YAAY,GAAG,MAAMd,OAAO,CAACe,GAAG,CAACjB,aAAa,CAAC;MAErD,MAAMkB,SAAS,GAAG;QAChBxC,IAAI;QACJsC,YAAY;QACZ1C,WAAW;QACXK,KAAK;QACLC;MACF,CAAC;MAED,MAAMuC,GAAG,GAAG,MAAMxD,KAAK,CAACyD,IAAI,CAC1B,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,uBAAuB,mBAAmB,EACjFL,SACF,CAAC;MAED,IAAIC,GAAG,CAACK,IAAI,CAAChD,KAAK,EAAE;QAClBiD,OAAO,CAACjD,KAAK,CAAC2C,GAAG,CAACK,IAAI,CAAChD,KAAK,CAAC;MAC/B,CAAC,MAAM;QACLkD,KAAK,CAAC,oBAAoB,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZF,OAAO,CAACjD,KAAK,CAACmD,GAAG,CAACC,OAAO,CAAC;MAC1BnD,QAAQ,CAAC,oDAAoD,CAAC;IAChE;IAEAA,QAAQ,CAAC,EAAE,CAAC;IACZJ,SAAS,CAACc,KAAK,CAACjB,SAAS,CAAC,CAACkB,IAAI,CAAC,IAAI,CAAC,CAAC;IACtCb,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,oBACEV,OAAA;IAAAgE,QAAA,gBACEhE,OAAA;MAAAgE,QAAA,GAAO,0BAEL,eAAAhE,OAAA;QAAQqB,KAAK,EAAEhB,SAAU;QAAC4D,QAAQ,EAAEjD,qBAAsB;QAAAgD,QAAA,EACvD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC5B,GAAG,CAAE8B,GAAG,iBACpBlE,OAAA;UAAkBqB,KAAK,EAAE6C,GAAI;UAAAF,QAAA,EAC1BE;QAAG,GADOA,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAER,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACRtE,OAAA;MACEuE,KAAK,EAAE;QACLC,OAAO,EAAE,MAAM;QACfC,mBAAmB,EAAE,UAAUC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEtE,SAAS,CAAC,QAAQ;QAC7DuE,GAAG,EAAE;MACP,CAAE;MAAAZ,QAAA,EAED1C,KAAK,CAACyB,IAAI,CAAC;QAAEd,MAAM,EAAE5B;MAAU,CAAC,CAAC,CAAC+B,GAAG,CAAC,CAACyC,CAAC,EAAEpD,KAAK,kBAC9CzB,OAAA;QAAiBuE,KAAK,EAAE;UAAEO,QAAQ,EAAE,UAAU;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAf,QAAA,EACnEzD,MAAM,CAACkB,KAAK,CAAC,gBACZzB,OAAA,CAAAE,SAAA;UAAA8D,QAAA,gBACEhE,OAAA;YACEgF,GAAG,EAAEC,GAAG,CAACC,eAAe,CAAC3E,MAAM,CAACkB,KAAK,CAAC,CAAE;YACxC0D,GAAG,EAAC,SAAS;YACbZ,KAAK,EAAE;cACLa,KAAK,EAAE,OAAO;cACdC,MAAM,EAAE,OAAO;cACfC,SAAS,EAAE;YACb;UAAE;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACFtE,OAAA;YACEuF,OAAO,EAAEA,CAAA,KAAM1D,YAAY,CAACJ,KAAK,CAAE;YACnC8C,KAAK,EAAE;cACLO,QAAQ,EAAE,UAAU;cACpBU,GAAG,EAAE,CAAC;cACNC,KAAK,EAAE,CAAC;cACRC,eAAe,EAAE,KAAK;cACtB5E,KAAK,EAAE,OAAO;cACd6E,MAAM,EAAE,MAAM;cACdC,YAAY,EAAE,KAAK;cACnBR,KAAK,EAAE,MAAM;cACbC,MAAM,EAAE,MAAM;cACdQ,MAAM,EAAE;YACV,CAAE;YAAA7B,QAAA,EACH;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,eACT,CAAC,gBAEHtE,OAAA;UAAAgE,QAAA,gBACEhE,OAAA;YACEuE,KAAK,EAAE;cACLa,KAAK,EAAE,OAAO;cACdC,MAAM,EAAE,OAAO;cACfM,MAAM,EAAE,iBAAiB;cACzBnB,OAAO,EAAE,MAAM;cACfsB,UAAU,EAAE,QAAQ;cACpBC,cAAc,EAAE,QAAQ;cACxBF,MAAM,EAAE;YACV,CAAE;YAAA7B,QAAA,EACH;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACNtE,OAAA;YACEgG,IAAI,EAAC,MAAM;YACXzB,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAO,CAAE;YAC3BP,QAAQ,EAAGgC,CAAC,IAAKzE,gBAAgB,CAACC,KAAK,EAAEwE,CAAC;UAAE;YAAA9B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG;MACR,GAnDO7C,KAAK;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAoDV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNtE,OAAA;MACEqB,KAAK,EAAEZ,WAAY;MACnBwD,QAAQ,EAAGgC,CAAC,IAAKvF,cAAc,CAACuF,CAAC,CAAC7E,MAAM,CAACC,KAAK,CAAE;MAChD6E,WAAW,EAAC,6BAA6B;MACzC3B,KAAK,EAAE;QACLa,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdc,SAAS,EAAE;MACb;IAAE;MAAAhC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,EACX3D,KAAK,iBAAIX,OAAA;MAAKuE,KAAK,EAAE;QAAEzD,KAAK,EAAE;MAAM,CAAE;MAAAkD,QAAA,EAAErD;IAAK;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrDtE,OAAA;MAAQuF,OAAO,EAAEzD,YAAa;MAAAkC,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAAAlE,EAAA,CA/awBD,UAAU;AAAAiG,EAAA,GAAVjG,UAAU;AAAA,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
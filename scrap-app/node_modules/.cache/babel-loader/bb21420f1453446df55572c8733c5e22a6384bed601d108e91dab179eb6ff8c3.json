{"ast":null,"code":"var _jsxFileName = \"/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/DrapAndDrop.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport DraggableImage from './DraggableImage';\nimport Page from './Page';\nimport { DndContext } from '@dnd-kit/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DragAndDrop() {\n  _s();\n  const pageRef = useRef(null);\n\n  // Define initial positions and image URLs for each image\n  const [images, setImages] = useState([{\n    id: 'image1',\n    x: 0,\n    y: 0,\n    imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1309054813966958663/IMG_2665.jpg?ex=6744cd0c&is=67437b8c&hm=f92f9225d7f41588f2e58f1e3dac31621bcca79b7800447a12d54bb127cd8831&=&format=webp&width=1248&height=936',\n    size: {\n      width: 240,\n      height: 160\n    }\n  }, {\n    id: 'image2',\n    x: 0,\n    y: 200,\n    imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1301389329817403493/IMG_4203.jpg?ex=67454242&is=6743f0c2&hm=04ca92b4bf16431b923b3e631f9175f626e502b66482124d94347fc16c6211cf&=&format=webp&width=1248&height=936',\n    size: {\n      width: 240,\n      height: 160\n    }\n  }, {\n    id: 'image3',\n    x: -300,\n    y: 0,\n    imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1300694734745894962/IMG_4197.jpg?ex=6744b59e&is=6743641e&hm=ec630912d3923374486fe760103bce798a3c367c74dfed3056fd58370713fdd2&=&format=webp&width=1248&height=936',\n    size: {\n      width: 240,\n      height: 160\n    }\n  }, {\n    id: 'image4',\n    x: -300,\n    y: 200,\n    imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1301389323136139316/IMG_4216.jpg?ex=67454241&is=6743f0c1&hm=5f28de06a5df46166c363257a430e124e8a968b0524de275acc46cde515a37d1&=&format=webp&width=1248&height=936',\n    size: {\n      width: 240,\n      height: 160\n    }\n  }]);\n  const [bounds, setBounds] = useState({\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  });\n  const imageRefs = useRef({}); // Store refs for all images\n\n  useEffect(() => {\n    if (pageRef.current) {\n      const rect = pageRef.current.getBoundingClientRect();\n      setBounds({\n        top: 0,\n        left: -rect.width / 2,\n        bottom: rect.height,\n        right: rect.width / 2\n      });\n    }\n  }, []);\n  const handleDragEnd = event => {\n    const {\n      delta,\n      active\n    } = event; // `active` contains the `id` of the dragged item\n\n    setImages(prevImages => prevImages.map(image => image.id === active.id ? {\n      ...image,\n      x: Math.min(Math.max(image.x + delta.x, bounds.left), bounds.right - image.size.width // Use size.width directly\n      ),\n      y: Math.min(Math.max(image.y + delta.y, bounds.top), bounds.bottom - image.size.height // Use size.height directly\n      )\n    } : image));\n  };\n  useEffect(() => {\n    // Update dimensions for each image\n    images.forEach(image => {\n      const ref = imageRefs.current[image.id];\n      if (ref) {\n        const {\n          width,\n          height\n        } = ref.getBoundingClientRect();\n        imageRefs.current[image.id] = {\n          ...imageRefs.current[image.id],\n          width,\n          height\n        };\n      }\n    });\n  }, [images]);\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Page, {\n      ref: pageRef,\n      size: 700,\n      children: images.map(image => /*#__PURE__*/_jsxDEV(DraggableImage, {\n        id: image.id // Pass unique id for each image\n        ,\n        ref: node => {\n          if (node) imageRefs.current[image.id] = node;\n        },\n        position: {\n          x: image.x,\n          y: image.y\n        },\n        imageUrl: image.imageUrl // Pass specific URL for each image\n        ,\n        size: image.size\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(DragAndDrop, \"HkIupSWys5XELbrnIN8B5VzriiI=\");\n_c = DragAndDrop;\nvar _c;\n$RefreshReg$(_c, \"DragAndDrop\");","map":{"version":3,"names":["React","useRef","useState","useEffect","DraggableImage","Page","DndContext","jsxDEV","_jsxDEV","DragAndDrop","_s","pageRef","images","setImages","id","x","y","imageUrl","size","width","height","bounds","setBounds","top","left","bottom","right","imageRefs","current","rect","getBoundingClientRect","handleDragEnd","event","delta","active","prevImages","map","image","Math","min","max","forEach","ref","onDragEnd","children","node","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jasminewongphatarakul/scrap/scrap/scrap-app/src/DrapAndDrop.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport DraggableImage from './DraggableImage';\nimport Page from './Page';\nimport { DndContext } from '@dnd-kit/core';\n\nexport default function DragAndDrop() {\n  const pageRef = useRef(null);\n\n  // Define initial positions and image URLs for each image\n  const [images, setImages] = useState([\n    { id: 'image1', x: 0, y: 0,\n      imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1309054813966958663/IMG_2665.jpg?ex=6744cd0c&is=67437b8c&hm=f92f9225d7f41588f2e58f1e3dac31621bcca79b7800447a12d54bb127cd8831&=&format=webp&width=1248&height=936',\n      size: {width: 240, height: 160} },\n    { id: 'image2', x: 0, y: 200,\n      imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1301389329817403493/IMG_4203.jpg?ex=67454242&is=6743f0c2&hm=04ca92b4bf16431b923b3e631f9175f626e502b66482124d94347fc16c6211cf&=&format=webp&width=1248&height=936',\n      size: {width: 240, height: 160}},\n    { id: 'image3', x: -300, y: 0,\n      imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1300694734745894962/IMG_4197.jpg?ex=6744b59e&is=6743641e&hm=ec630912d3923374486fe760103bce798a3c367c74dfed3056fd58370713fdd2&=&format=webp&width=1248&height=936',\n      size: {width: 240, height: 160}},\n    { id: 'image4', x: -300, y: 200,\n      imageUrl: 'https://media.discordapp.net/attachments/1297781942590378108/1301389323136139316/IMG_4216.jpg?ex=67454241&is=6743f0c1&hm=5f28de06a5df46166c363257a430e124e8a968b0524de275acc46cde515a37d1&=&format=webp&width=1248&height=936',\n      size: {width: 240, height: 160}},\n  ]);\n\n  const [bounds, setBounds] = useState({ top: 0, left: 0, bottom: 0, right: 0 });\n  const imageRefs = useRef({}); // Store refs for all images\n\n  useEffect(() => {\n    if (pageRef.current) {\n      const rect = pageRef.current.getBoundingClientRect();\n\n      setBounds({\n        top: 0,\n        left: -rect.width/2,\n        bottom: rect.height,\n        right: rect.width/2,\n      });\n    }\n  }, []);\n\n  const handleDragEnd = (event) => {\n    const { delta, active } = event; // `active` contains the `id` of the dragged item\n  \n    setImages((prevImages) =>\n      prevImages.map((image) =>\n        image.id === active.id\n          ? {\n              ...image,\n              x: Math.min(\n                Math.max(image.x + delta.x, bounds.left),\n                bounds.right - image.size.width // Use size.width directly\n              ),\n              y: Math.min(\n                Math.max(image.y + delta.y, bounds.top),\n                bounds.bottom - image.size.height // Use size.height directly\n              ),\n            }\n          : image\n      )\n    );\n  };\n  \n\n  useEffect(() => {\n    // Update dimensions for each image\n    images.forEach((image) => {\n      const ref = imageRefs.current[image.id];\n      if (ref) {\n        const { width, height } = ref.getBoundingClientRect();\n        imageRefs.current[image.id] = { ...imageRefs.current[image.id], width, height };\n      }\n    });\n  }, [images]);\n\n  return (\n    <DndContext onDragEnd={handleDragEnd}>\n      <Page ref={pageRef} size={700}>\n        {images.map((image) => (\n          <DraggableImage\n            key={image.id}\n            id={image.id} // Pass unique id for each image\n            ref={(node) => {\n              if (node) imageRefs.current[image.id] = node;\n            }}\n            position={{ x: image.x, y: image.y }}\n            imageUrl={image.imageUrl} // Pass specific URL for each image\n            size={image.size}\n          />\n        ))}\n      </Page>\n    </DndContext>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}